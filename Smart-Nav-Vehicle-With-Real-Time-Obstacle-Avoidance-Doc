ABSTRACT:-

The aim of a “SMART NAV VEHICLE WITH REAL TIME OBSTACLE AVOIDANCE” is to 
	To create a vehicle that can autonomously navigate and avoid obstacles.
	Smart cars that avoid collisions while parking.
	Foundation for self-driving cars that navigate without human intervention.
	Autonomous parking assistants to guide vehicles in tight spaces.
The goal of the project is to create a autonomous vehicle that can avoid obstacles by employing ultrasonic sensors to guide it. In order to carry out the requested operation, an Arduino Uno is used. It is generally a combination of computational intelligence and physical machines (motors). Computational intelligence involves the programmed instructions. 
The idea suggests creating an autonomous vehicle with built-in intelligence that can self-direct when an obstacle is in its path. 
An Arduino Uno is used to construct this robotic car. Any obstruction in front of it is detected by an ultrasonic sensor, which then instructs the Arduino. It can do desired tasks in unstructured conditions without constant human supervision. 
The fundamental requirement for this autonomous vehicle is obstacle detection. Through mounted sensors, it gathers information about its surroundings.
Avoiding obstacles is a key job in it, where it aim to reach their destination without bumping into things. One type of autonomous vehicle that's pretty clever is the real-time Arduino obstacle avoiding car. It can spot obstacles and figure out new paths to move without running into them. Previously, we have build many robots using arduino including an Obstacle Avoiding vehicle using Arduino Uno and Ultrasonic Sensor, you can also check them out if you are interested.
In this comprehensive guide, I will explain the process of constructing very own obstacle avoiding car using Arduino. This innovative vehicle employs a servo mounted ultrasonic sensor to detect objects situated both in front and on either side of the car. Additionally, it employs an L298N DC motor driver, which serves as the driving force for four geared motors. you also need a Arduino obstacle avoiding car kit for this project.


LITERATURE SURVEY :-
Following are some facts that are based on a thought analysis of various authors' works and are revealed in this area of the literature study.
He Kezhong in 1996, An autonomous Robot was developed in house for outdoor applications and demonstrated on road-following with obstacle avoidance task at an average speed of 3m/s. Here the computer vision i.e. Ultra sonic sensor are used in the robot of road following and obstacle avoiding
Gopalkrishnan in 2004 have developed Methodology for design and development of an Autonomous Robot for implementing intelligent behaviours, with the help of microcontroller interfaced & Sensor. The component of robot were microcontroller, control software, Sensors & Actuators. The controller is generally based on microcontroller or personal computer.
Jang ping sheu in 2005 have proposed a sensor network consisting of both static and mobile nodes in a distributed network system. They have design a smart Robot and implemented it for nodes replacement task in distributed network 
Ioan Doroftei in 2007 have proposed some information about conventional and special wheel called Mecanum Design. One of the primary requirements of an autonomous robot is its capacity to navigate the working environment while dodging obstacles and moving on to the next site.
Kunhsiangwu in 1999 have proposed path of planning method using fuzzy logic control with potential field approach for Automatic Guided Vehicle design and implementation with image processing technique. 

 
PROJECT REQUIREMENTS:-
Hardware and Software Requirements: -

Arduino Board: 
The brain of the car. It processes input from sensors and controls the motors accordingly. An Arduino board processing data from sensors like ultrasonic sensors, and controlling motors to navigate and avoid obstacles. 
Arduino UNO: 
Arduino UNO is a microcontroller board based on the ATmega328P. It has 14 digital input/output pins (of which 6 can be used as PWM outputs), 6 analog inputs, a 16 MHz ceramic resonator, a USB connection, a power jack, an ICSP header and a reset button. It contains everything needed to support the microcontroller; simply connect it to a computer with a USB cable or power it with a AC-to-DC adapter or battery to get started. You can tinker with your UNO without worrying too much about doing something wrong, worst case scenario you can replace the chip for a few dollars and start over again.
 
Programming:
 Arduino IDE to control the microcontroller and sensors
Replaceable chip:
 The ATmega328P can easily be replaced, as it is not soldered to the board
EEPROM: 
The ATmega328P also features 1kb of EEPROM, a memory which is not erased when powered off.
Battery Connector: 
The Arduino UNO features a barrel plug connector, that works great with a standard 9V battery.
Ultrasonic Sensor (e.g., HC_SR04):
 The sensor measures the distance to obstacle by emitting ultrasonic waves and receiving the reflected signals. This system controls steering, acceleration and braking automatically, based on the information gained by ultrasonic waves. Ultrasonic Distance Sensor - 5V (HC-SR04)-This is the HC-SR04 ultrasonic distance sensor. This economical sensor provides 2cm to 400cm of non-contact measurement functionality with a ranging accuracy that can reach up to 3mm. Each HC-SR04 module includes an ultrasonic transmitter, a receiver and a control circuit.
There are only four pins that you need to worry about on the HC-SR04: VCC (Power), Trig (Trigger), Echo (Receive), and GND (Ground). You will find this sensor very easy to set up and use for your next range-finding project!
This sensor has additional control circuitry that can prevent inconsistent "bouncy" data depending on the application.
 
DC Motors:  
These are used to move the car forward, backward, or steer it left and right. DC motors are used to power the wheels, enabling forward, backward, and turning movements, while a microcontroller (like Arduino) and sensors (like ultrasonic sensors) detect obstacles and control the motors to navigate safely. 
 
Servo Motor Drivers: 
Designed to control servo motors, widely used in robotics and automation.
Motor Driver (e.r., L298N): 
It controls the speed and the direction of the DC Motors, as the Arduino cannot directly handle the power needed by the motors. Motor driver, like L293D or L298N, is used to control the DC motors, allowing the microcontroller to control the speed and direction of the wheels. It acts as an interface between a microcontroller (or another control system) and the motor, allowing the low-voltage signal from the controller to operate the motor with higher current and voltage.
 
Wheels and Chassis: 
The physical structure of the car, including wheels and a base to hold all the components.  Wheels are an essential component for mobility.
The chassis provides the structural base, while the wheels allow for movement and maneuverability, enabling the car to navigate its environment and avoid obstacles.
 
Power Supply:
Usually battery pack to power the motors and Arduino. The power supply typically involves a battery (like a 9V or multiple AA batteries) providing power to the Arduino board, motor driver, and sensors
 
Jumper Wires:
These are used to connect the various components to the Arduino. Jumper wires are essential for connecting various components like the Arduino board, motor driver, ultrasonic sensor, and LEDs, ensuring proper electrical connections and signal transmission. They are flexible, insulated wires with metal pins or tips on either end, making them easy to plug into breadboards, microcontrollers, or other hardware. 
 
There are different types of jumper wires. They are:
i.	Male to male 
ii.	Female to female
iii.	Female to male 

Gear Motor:
 Gear motors provide the necessary power and controlled movement for the wheels, while ultrasonic sensors detect obstacles, and a microcontroller (like Arduino) interprets sensor data to adjust motor direction and speed, enabling autonomous navigation. They are used to drive the wheels of the car, allowing it to move forward, backward, and turn.

 

Software:-
Programming:
 Arduino IDE to control the microcontroller and sensors.

 
Functional Requirements :-

1.Sensing and Perception:
Obstacle Detection:
Sensors: Utilize sensors like ultrasonic sensors, infrared sensors, or cameras to detect obstacles in the car's path. 
Range and Accuracy: 
Sensors must have a sufficient range to detect obstacles at a safe distance and provide accurate distance measurements. 
Environmental Conditions: 
The system should be robust enough to function under various environmental conditions, including different lighting conditions and weather. 
Environment Mapping:
Path Planning: 
The car needs to be able to map its environment and plan a safe path to its destination, avoiding obstacles. 
Dynamic Obstacle Handling: 
The system should be able to handle dynamic obstacles, such as moving objects or pedestrians, and adjust its path accordingly. 

2. Control and Decision-Making:
Decision Logic:
Algorithm: 
Implement an algorithm to determine the best course of action based on sensor data and the desired path.
Safety First: 
The algorithm should prioritize safety and avoid collisions at all costs.
Path Planning:
Route Selection: 
The car should be able to select the safest and most efficient route to its destination.
Real-time Adaptation: 
The path planning algorithm should be able to adapt to changes in the environment in real-time. 

3. Actuation and Movement:
Motor Control:
Precise Movement: 
The car needs to be able to control its motors accurately to execute maneuvers, such as turning, stopping, and backing up.
Smooth Transitions: 
The transitions between different movements should be smooth and avoid jerky movements.
Steering Control:
Accurate Steering: 
The car should be able to steer accurately to avoid obstacles and follow the planned path. 
Responsive Steering: 
The steering system should be responsive and allow for quick changes in direction.

 
Non-Functional Requiements:

1. Safety:
Collision Avoidance: 
The car must be able to detect and avoid obstacles, preventing collisions with stationary or moving objects.
Emergency Stop: 
A reliable mechanism for immediate stopping in hazardous situations is crucial.
Sensor Reliability: 
Sensors used for obstacle detection must be accurate and reliable, minimizing false positives and negatives.
Robustness: 
The car's hardware and software should be robust enough to withstand environmental conditions and potential impacts. 

2. Performance:
Speed and Agility: 
The car should be able to navigate obstacles quickly and efficiently, while maintaining stability.
Response Time: 
The time taken for the car to react to obstacle detection and execute avoidance maneuvers should be minimal.
Accuracy: 
The car's sensors and control system must be accurate to ensure precise obstacle avoidance.

Battery Life: 
The car should have sufficient battery life for its intended duration of operation. 


3. Reliability:
Fault Tolerance: 
The system should be designed to gracefully handle failures or errors in specific components without causing a complete system shutdown.
Redundan+cy: 
Consider implementing redundant systems for critical components to enhance reliability.
Predictable Behavior: 
The car's behavior should be predictable and consistent under various conditions. 

4. Maintainability:
Modularity: 
Design the system with modular components to facilitate easy maintenance and upgrades.
Diagnostics: 
Implement robust diagnostic tools to quickly identify and resolve issues.
Ease of Repair: 
The car should be designed for easy access and repair of component. 
METHODOLOGY

Working Principle:
The main principle of an obstacle-avoiding car involves using sensors (like ultrasonic or infrared) to detect obstacles in its path, then using a microcontroller to process this information and control the car's motors to change direction and avoid collisions. 
Here's a more detailed explanation:
Sensing:
Ultrasonic Sensors: 
These sensors emit high-frequency sound waves and measure the time it takes for the sound to bounce back from an object, determining the distance to the obstacle. 
Infrared Sensors: 
These sensors detect changes in infrared light reflected from objects, allowing them to sense obstacles. 
Other options: 
Some systems also use cameras and computer vision for obstacle detection.
Placement:
Sensors are strategically placed on the car, typically at the front and sides, to provide a 360-degree view of the environment.
Processing:
Microcontroller: 
The microcontroller receives data from the sensors and uses algorithms to determine the presence and location of obstacles. 
Algorithm: 
The microcontroller uses a pre-programmed algorithm to interpret the sensor data
Distance Measurement: 
The microcontroller calculates the distance to obstacles based on the sensor readings. 
Obstacle Detection:
 It determines whether an obstacle is present within a certain threshold distance.
Decision-Making: 
Based on the sensor data, the microcontroller decides whether to continue in the current direction or to take evasive action (e.g., turn left, turn right, or stop). 
Actuation:
Motor Control:
 The microcontroller sends signals to the motors, controlling their speed and direction, allowing the car to navigate around obstacles. 
Movement:
By controlling the motors, the car can move forward, backward, turn left, or turn right, allowing it to navigate around obstacles.
Example Scenario:
The car is moving forward.
The ultrasonic sensor detects an obstacle in front of the car. 
The microcontroller receives the sensor data and determines that an obstacle is present.
The microcontroller sends signals to the motor drivers, causing the car to turn left or right to avoid the obstacle.
Once the obstacle is clear, the car resumes moving forward.
Examples of Technologies Used:
Arduino: 
A popular microcontroller platform used for building obstacle-avoiding robots and cars. 
Motor Drivers: 
These circuits are used to control the DC motors that drive the car's wheels. 
Path Planning Algorithms: 
More advanced systems use algorithms to calculate the optimal path to a destination while avoiding obstacles. 
Machine Learning: 
Some systems use machine learning to improve obstacle detection and path planning
 
DESIGN AND IMPLEMENTATION
Connections:
The requirements are connected with each other as shown below 
 
  
Arduino Obstacle Avoiding Car Circuit Diagram
The complete circuit diagram for this 2wd obstacle avoiding robot is given above. As you can see, it uses an Ultrasonic sensor to take measurements in all three directions with the help of a servo motor. Based on the distance measurements, the motor takes actions to move forward or turn left and right.
The sensor plays a crucial role in this project. It sends out 40kHz ultrasonic signals that bounce back when they hit an object. By analyzing the returning echoes, the sensor calculates distances between the car and obstacles in real-time. When an obstacle is detected, the car autonomously changes direction. Once our arduino car for obstacle avoidance is built it should look like something as shown in image above.
We have used an off the shelf Robotic Car chassis kit to build the body of our robot. There many versions of Arduino robot kit available in the market you can purchase the now of your choice. But, we personally selected this kit because it looks more like a car with a front bumper, spoiler etc. Previously we have also used the same kit to build other projects like Human Following Robot and Pick and Place Arduino Robot Car, you can also check them out if you are interested. 
Arduino Obstacle Avoiding Car Wiring Connection:
Build the arduino based obstacle avoiding robot car is pretty simple, to make things easy to understand, in the following paragraphs we have explained how each component is connected to arduino nano. You can also follow the circuit diagram for better understanding. 
Servo Motor Connection with Arduino:
To connect the servo motor to the Arduino, simply attach the signal wire to any PWM control pin, connect the power wire to the 5V output from a DC-DC converter, and link the ground wire to one of the Arduino's ground pins.
Connecting Arduino Car to Ultrasonic Sensor:
Connect the sensor to the Arduino like this: VCC to 5V, GND to GND, TRIG to a digital pin 2, and ECHO to another digital pin 4 of. This setup allows the Arduino to interact with the sensor, further we will also be writing an arduino car ultrasonic sensor code to enable our robot to read the distance of object ahead of it and control the wheels accordingly. More details on that can be found in the code section, 
RGB LEDs Connection with Arduino:
Connect all the RGB LEDs' ground (cathode) to a ground rail on the breadboard. Then, link each RGB LED's red terminal to an analog pin on the Arduino(A1,A2&A3) and the green terminal to a digital pin on the Arduino(5,6&13).This configuration allows the Arduino to control the RGB LEDs.
L298N Motor Driver Connection with Arduino:
Arduino's GND to breadboard GND rail, Arduino's Vin to breadboard positive rail, LM2596 5V out to positive rail, LM2596 GND out to GND rail. For DC motor 1  L298N IN1 and IN2 to Arduino pins 7 and 8. For DC motor 2  L298N IN3 and IN4 to Arduino pins 12 and 11. Enable PWM motor control by connecting L298N ENA to Arduino PWM pin 9 and ENB to PWM pin 10, enabling independent control of two DC motors using Arduino.
Power Connections:
Connect the 12V Li-ion battery's positive terminal to the LM2596's Vin input and link the battery's negative terminal to the breadboard's ground rail. Also, connect the battery's positive terminal to the L298N motor driver's 12V input and connect the battery's negative terminal to the L298N's GND.
Additionally, I've added three RGB LEDs on the underside of the car to indicate its movement. When the car stops, all the LEDs turn red. When it moves forward, they all turn green. If the car takes a right turn, the right-side LED glows green while the other two stay red, and the same goes for a left turn.
Additionally, I incorporated several enhancements to the car's design. These include the addition of a power on/off switch, a 12V DC charging socket, and a Li-ion battery level indicator located on the back side of the vehicle. Furthermore, I included a slider switch near to the DC socket, which serves the purpose of monitoring the battery level when the primary power switch is  off. When it comes to charging the battery, you simply slide the switch upwards. Conversely, if you wish to check the charging status of the battery, you can easily slide the switch back down. when switch is slide down it will not charge the battery.
Important:
	Always turn off the Arduino power switch and remove external Vin supply when you upload the code.
	When switch is slide down it will not charge the battery.
	Secure all components to the car frame using screws, nuts, and spacers as needed. Ensure that all connections are secure and free from loose wires or potential short circuits. Always double-check your connections before powering on the circuit.

After connecting the Positiv, Tric, Echc, Gnc pins the components should be connected with each other using jumper wires.  
After connecting all the pins the prototype will look like this

 

  
Implementation:-

Arduino Obstacle Avoiding Car Code
Now that the obstacle avoiding car connection is complete, let’s have a look at the Arduino obstacle avoiding car code. The complete arduino code for obstacle avoiding car is given at the end of this page. The program will include setting up HC-SR04 module and outputting the signals to Motor Pins to move motor direction accordingly.
//ARDUINO OBSTACLE AVOIDING CAR//
#include <AFMotor.h>  
#include <NewPing.h>
#include <Servo.h> 
#define TRIG_PIN A0 
#define ECHO_PIN A1 
#define MAX_DISTANCE 200 
#define MAX_SPEED 190 
#define MAX_SPEED_OFFSET 20
NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE); 
AF_DCMotor motor1(1, MOTOR12_1KHZ); 
AF_DCMotor motor2(2, MOTOR12_1KHZ);
AF_DCMotor motor3(3, MOTOR34_1KHZ);
AF_DCMotor motor4(4, MOTOR34_1KHZ);
Servo myservo;   
boolean goesForward=false;
int distance = 100;
int speedSet = 0;
void setup() 
{
  myservo.attach(10);  
  myservo.write(115); 
  delay(2000);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
}
void loop()
{
 int distanceR = 0;
 int distanceL =  0;
 delay(40);
 if(distance<=15)
{
  moveStop();
  delay(100);
  moveBackward();
  delay(300);
  moveStop();
  delay(200);
  distanceR = lookRight();
  delay(200);
  distanceL = lookLeft();
  delay(200);
  if(distanceR>=distanceL)
{
    turnRight();
    moveStop();
}
  else
{
    turnLeft();
    moveStop();
}
  }
 else 
{
  moveForward(); 
}
 distance = readPing(); 
}
int lookRight() 
{
    myservo.write(50); 
    delay(500);
    int distance = readPing();
    delay(100);
    myservo.write(115); 
    return distance; 
}
int lookLeft() 
{
    myservo.write(170); 
    delay(500);
    int distance = readPing();
    delay(100);
    myservo.write(115); 
    return distance;
    delay(100); 
}
int readPing() 
{ 
  delay(70);
  int cm = sonar.ping_cm();
  if(cm==0)  
{
    cm = 250;  
}
  return cm; 
}
void moveStop() 
{
  motor1.run(RELEASE); 
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE); 
} 
void moveForward() 
{
 if(!goesForward)  
{
    goesForward=true;
    motor1.run(FORWARD);      
    motor2.run(FORWARD);
    motor3.run(FORWARD); 
    motor4.run(FORWARD);     
   for (speedSet = 0; speedSet < MAX_SPEED; speedSet +=2) 
{
    motor1.setSpeed(speedSet);
    motor2.setSpeed(speedSet);
    motor3.setSpeed(speedSet);
    motor4.setSpeed(speedSet);
    delay(5); 
}
  }
}
void moveBackward() 
{
    goesForward=false;
    motor1.run(BACKWARD);      
    motor2.run(BACKWARD);
    motor3.run(BACKWARD);
    motor4.run(BACKWARD);  
  for (speedSet = 0; speedSet < MAX_SPEED; speedSet +=2)   
{
    motor1.setSpeed(speedSet);
    motor2.setSpeed(speedSet);
    motor3.setSpeed(speedSet);
    motor4.setSpeed(speedSet);
    delay(5); 
}
}  
void turnRight() 
{
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);     
  delay(500);
  motor1.run(FORWARD);      
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);  
} 
void turnLeft() 
{
  motor1.run(BACKWARD);     
  motor2.run(BACKWARD);  
  motor3.run(FORWARD);
  motor4.run(FORWARD);   
  delay(500);
  motor1.run(FORWARD);     
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
}


BENEFITS OF SMART NAV VEHICLE WITH REAL TIME OBSTACLE AVOIDANCE:-
1.Safety and Reduced Accidents:
Collision Avoidance:
Obstacle avoidance systems, using sensors and AI, can detect and react to obstacles, preventing collisions and reducing the risk of accidents. 
Reduced Human Error:
Autonomous obstacle avoidance eliminates human errors, such as distracted driving or poor judgment, which are major contributors to accidents. 
Improved Road Safety:
By minimizing human involvement in driving, obstacle-avoiding cars can contribute to safer roads and reduce fatalities. 
Efficiency and Traffic Management:
Smoother Traffic Flow:
Autonomous navigation and obstacle avoidance can optimize traffic flow, leading to reduced congestion and travel times.
Increased Vehicle Capacity:
Improved traffic flow and efficient parking can lead to more vehicles being able to use the same space.
Optimized Routing:
Obstacle-avoiding cars can dynamically adjust routes to avoid traffic and obstacles, leading to faster and more efficient travel. 
2.Environmental Benefits:
Reduced Emissions:
Autonomous vehicles can optimize speed and reduce idling, leading to lower fuel consumption and reduced emissions.
Sustainable Transportation:
By contributing to a more efficient and sustainable transportation system, obstacle-avoiding cars can help address climate change and air pollution

CHALLENGES OF SMART NAV VEHICLE WITH REAL TIME OBSTACLE AVOIDANCE:-
1. Real-World Limitations & Complexity:
Limited Training Data:
Obstacle-avoiding systems are often trained on specific scenarios, which may not cover all possible real-world situations. 
Unpredictable Environments:
The complexity of real-world environments (e.g., varying lighting, weather, unexpected objects) can challenge the system's ability to accurately perceive and react to obstacles. 
Cost and Complexity:
Implementing and maintaining sophisticated obstacle avoidance systems can be expensive and require specialized expertise. 
2. Sensor Accuracy and Reliability:
Sensor Failures:
Sensors (e.g., ultrasonic, infrared) used for obstacle detection can malfunction or become inaccurate, leading to collisions.
False Positives/Negatives:
Sensors might misinterpret objects as obstacles (false positives) or fail to detect real obstacles (false negatives).
Environmental Factors:
Sensors can be affected by environmental conditions like rain, fog, or dust, reducing their accuracy. 
3. Safety Concerns:
Sudden Maneuvers:
In an attempt to avoid an obstacle, an obstacle-avoiding car might make sudden or unexpected maneuvers, potentially leading to accidents.
Human Overriding:
If the system fails or makes an unsafe decision, the driver might need to take control, which could be difficult or dangerous in a complex situation.


REAL WORLD APPLICATIONS:-

1.	Self-Driving and Autonomous Vehicles:
Foundation for self-driving cars that navigate without human intervention.
Enhanced Safety:
Obstacle avoidance is a crucial component of self-driving cars, enabling them to navigate roads and avoid collisions with pedestrians, other vehicles, and stationary objects.
Traffic Efficiency:
Autonomous vehicles with robust obstacle avoidance systems can contribute to smoother traffic flow and reduced accidents.
Blind Spot Detection:
These systems can identify hidden dangers in blind spots that human drivers might miss. 

2.  Industrial Automation:
Robotics in Warehouses and Factories:
Obstacle avoidance allows robots to move autonomously within warehouses and factories, performing tasks like material handling and assembly without human intervention. Automated guided vehicles (AGVs) in warehouses for inventory management.
Autonomous Guided Vehicles (AGVs):
AGVs, which are used for transporting goods within industrial facilities, rely on obstacle avoidance technology to navigate complex environments. Autonomous delivery bots for last-mile delivery in urban areas.

3.	Household and Personal Use:
Automated guided robots in factories to transport goods.
Robotic Vacuum Cleaners:
These devices use obstacle avoidance to navigate homes and clean floors without bumping into furniture or walls.
Assistive Devices:
Obstacle avoidance can be incorporated into robots or other devices to assist people with mobility limitations or in dangerous environments. 

4.	Disaster Relief and Rescue Operations
Search and rescue operations in disaster-prone areas.
Exploration of dangerous environments where human access is risky.
Detect and navigate through rubble to locate trapped individuals.

5.	Military and Surveillance Applications
Autonomous patrolling of restricted or high-risk zones.
Unmanned vehicles for bomb detection and disposal.
Reconnaissance and surveillance in hazardous environments.

6.	Exploration and Research:
Dangerous Environments:
Obstacle avoidance is essential for robots used in hazardous environments, such as disaster zones or nuclear facilities, where human intervention is risky. 
Space Exploration:
Robots designed for space exploration require robust obstacle avoidance capabilities to navigate unknown terrains and avoid collisions with obstacles. 

7.	Agriculture and Farming
Autonomous tractors and farm machinery for plowing and harvesting.
Surveillance and monitoring of agricultural fields.
Detecting and avoiding obstacles in uneven terrains.

8.	Traffic and Parking Management
Smart cars that avoid collisions while parking.
Autonomous parking assistants to guide vehicles in tight spaces.

9.	Entertainment and Toys:
Smart robotic toys with obstacle avoidance features.
Autonomous RC cars for fun and interactive learning.

10.	Education and Research: 
Obstacle-avoiding cars serve as hands-on tools for teaching robotics, programming, and sensor integration (e.g., ultrasonic or infrared sensors) to students and hobbyists, fostering innovation in STEM fields.

11.	Healthcare and Elderly Care*
 Mobility Assistance: 
     Autonomous wheelchairs or mobility devices can assist elderly or disabled individuals by navigating environments while avoiding obstacles.
Telepresence Robots: 
Robots allowing healthcare professionals to remotely consult patients can navigate hospitals or care facilities autonomously.

12.	Indoor Navigation:
Service Robots: 
Robots used in hospitals, hotels, or large facilities can navigate indoor environments while avoiding people and furniture to deliver items or provide information.
 Automated Cleaning Devices: 
Robotic vacuum cleaners utilize obstacle avoidance to clean efficiently without getting stuck or damaging furniture.

13.	Other Applications:
Agricultural Vehicles:
Autonomous agricultural vehicles can use obstacle avoidance to navigate fields and perform tasks like planting and harvesting. 
Drones:
Drones used for delivery, surveillance, or other tasks can benefit from obstacle avoidance to ensure safe and efficient flight path.


 
***AND MAINLY IN PARKING SLOTS:

Logy in cars, especially for parking, utilizes sensors like ultrasonic or radar to detect nearby objects and alert the driver or even automatically maneuver the car to avoid collisions. This technology enhances safety and ease of parking in tight spaces.

How it works:
Ultra sonic sensor uses sound waves to detect nearby objects. The sensor notifies us with audible alerts. This system controls steering, acceleration and braking automatically, based on the parking zone and location information gained from the ultrasonic sensor, to achieve parallel parking and garage parking. In the case of the rear sonar, two to four ultrasonic sensors are mounted on the rear bumper to detect an obstacle up to 2 to 2.5m away. The distance is communicated to the driver in real time using varying buzzer sounds. Even a wire fence can be detected.
Sensors:
 Cars equipped with obstacle detection systems use sensors, typically ultrasonic sensors, to measure the distance between the car and nearby objects. 
Detection:
 These sensors emit sound waves and measure the time it takes for the waves to return after bouncing off an object. 
Alerts: 
The system then alerts the driver through beeps or visual displays on the dashboard as the car approaches an obstacle. 

Automatic Maneuvering: 
In some cases, advanced systems can automatically steer the car to avoid obstacles or assist with parking.
Benefits:
Using an obstacle-avoiding car in parking offers enhanced safety, convenience, and efficiency by minimizing the risk of collisions, simplifying parking maneuvers, and reducing stress, especially in tight or crowded spaces. 
Here's a more detailed breakdown of the benefits:
Enhanced Safety: 
Obstacle detection systems significantly reduce the risk of collisions, especially when backing up or parking in tight spaces. 
Ease of Parking: 
These systems make parking easier by providing real-time feedback on the car's proximity to obstacles. 
Reduced Stress: 
Drivers can park with greater confidence, knowing that the system will alert them to potential hazards.
360-Degree Coverage:
Some systems offer 360-degree coverage, eliminating blind spots that can be a problem during traditional parking maneuvers.
Parking in tight spaces:
By warning drivers of nearby objects, these systems help drivers park securely and without causing damage to their own or other people's vehicles
Reduced Collision Risk:
Obstacle-avoiding systems, often using sensors like radar, ultrasonic, or cameras, help drivers detect and avoid obstacles, pedestrians, and other vehicles during parking, significantly reducing the risk of accidents and property damage.
Real-time Feedback:
These systems provide real-time feedback to the driver through visual or audible signals, allowing for immediate action and preventing potential.
 
PREACAUTIONS

	Always turn off the Arduino power switch and remove external Vin supply when you upload the code.
	When switch is slide down it will not charge the battery.
	Secure all components to the car frame using screws, nuts, and spacers as needed. Ensure that all connections are secure and free from loose wires or potential short circuits. Always double-check your connections before powering on the circuit.

	Sensor Placement and Reliability:
•	Optimal Placement: 
     Position sensors (e.g., ultrasonic, IR) strategically to cover the car's front, sides, and potentially rear, depending on the application.
•	 Sensor Type:
     Choose sensors appropriate for the environment and obstacle types (e.g., ultrasonic for general objects, IR for specific materials). 
•	Sensor Calibration: 
     Calibrate sensors to ensure accurate distance readings and avoid false triggers.
•	Sensor Noise:
     Implement filtering or averaging techniques to reduce noise and ensure stable sensor readings.
•	Sensor Redundancy: 
     Consider using multiple sensors or sensor types for redundancy to improve reliability.


	 Motor Control and Movement:
•	Motor Driver:
     Use a reliable motor driver IC (e.g., L298N, L293D) to control the motors. 
•	Motor Calibration: 
     Calibrate motor speeds and direction to ensure consistent and predictable movement. 
•	Emergency Stop: 
     Implement an emergency stop mechanism (e.g., a physical switch or sensor) to immediately halt the car in case of unexpected issues. 
•	Software Control: 
     Use a microcontroller (e.g., Arduino) to control the motors and sensors, implementing appropriate algorithms for obstacle avoidance. 
•	Motion Smoothing: 
     Implement motion smoothing techniques (e.g., PID control) to ensure smooth and controlled movements.

	Testing and Validation:
•	Thorough Testing: 
      Conduct extensive testing in various environments and with different obstacles to ensure the car's reliability and performance.
•	Debug Prints: 
     Use serial prints or other debugging techniques to monitor sensor readings, motor commands, and program execution.
•	Simulation: 
     Use simulations to test the car's behavior in different scenarios before deploying it in the real world.
•	Safety Checks: 
     Implement safety checks (e.g., speed limits, obstacle distance thresholds) to prevent accidents.

	Environmental Considerations
•	Lighting Conditions:
     Ensure that the sensors can operate in various lighting conditions (e.g., bright sunlight, low light, night).
•	Weather Conditions: 
     Test and adapt the vehicle's operation in various weather conditions (rain, fog, snow) that could affect sensor performance.
	9. *Power Supply Reliability*
•	Backup Power Sources: 
     Ensure that there is a backup power supply to allow continued operation or controlled stopping in the event of a power failure.
•	Battery Monitoring: 
     Monitor battery levels and inform users about low power situations to prevent vehicle failure.
 
RESULT ANALYSIS

After the implementation the code should be deployed after that the project starts working.
To deploy the code the Arduino should be installed in your systems.
Expected Outcome:
A successful project should show the car moving forward and successfully navigating around obstacles without collisions.

The Final Outcome:
The final result of an obstacle-avoiding car project typically demonstrates the successful implementation of sensors (like ultrasonic or infrared) and algorithms to detect and navigate around obstacles, allowing the car to move autonomously. 
•	Successful detection and navigation: 
     Experimental results show that these systems can successfully detect and navigate around obstacles. 

•	Real-time obstacle avoidance:
     Ultrasonic sensors allow for real-time obstacle detection and avoidance, enabling the vehicle to move towards its target area while avoiding obstacles.

CONCLUSION

Following study on the aforementioned Arduino controller and ultrasonic sensor, the HC-SR04 ultrasonic sensor was selected because its control outcomes are suitable for usage in the recently developed vehicle prototype system. 
It was used to recognise barriers and avoid them. By writing the method in C++, the obstacle avoidance algorithm was effectively implemented and carried out with little to no error. 
The use of obstacle avoidance in vehicles can greatly reduce the likelihood of accidents and fatalities. As they design, build, and programme an autonomous robot, students will gain interest in and excitement for the subjects of engineering, mechatronics, and software development. 
The purpose of this experiment was to manipulate various robot components to control how they responded. 
The overall end objective was to make the robot avoid obstacle by programming it to use the sensors attached to it. 
Although the thesis project has very little information regarding the use of the robot in the real world, the outcome might be very advantageous for many individuals and various sectors of the global economy depending on the sensors and features needed to meet the requirements.
This obstacle avoiding car demonstrates the fundamental principles of autonomous robotics, making it an excellent educational tool and a fun project for those interested in robotics and electronics. Building upon this foundation, there are many advantages of obstacle avoiding car that can be expanded and adapted for more complex tasks like food delivery, warehouse management, telemetric robots etc, highlighting the exciting possibilities of robotics in various applications
                                                                 

